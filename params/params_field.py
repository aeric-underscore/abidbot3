import os


#################### Particle field line settings ####################
#
# settings pertaining to field lines that are seeded by particle points
#   | magnetic field lines follow the flow of matter, so for particle fields
#   | the seed points are particles of matter
# 

# useParticleTracer:    [bool]  (usually is false, particleTracer is not supported yet)
#                       If false: particlePicker is used to get seed points
#                       If true: particleTracer is used to get seed points                          
#
#                       There are two methods used to get seed points: particlePicker and particleTracer
#                         - particlePicker uses the file called 'paritcles.mon', which tracks the location of 
#                           a large number of particles at every time; particlePicker finds the particles at
#                           the firstTime closest to the specified points, and follows them in time
#                         - particleTracer uses the exact points specified and uses an RK4 integrator along 
#                           with the {vx, vy, vz} velocity h5data to trace its own particles
useParticleTracer = False

# firstTime:    [string] 
#               Similar to offset (an artifact of the old code that is only used in particlePicker)
#				| This is a string that is 017.11f number (5 digits left of the decimal, and 
#				| 11 digits right right of it, both zero padded). The value is the time in code
#				| units of the very first frame. You can find this by looking at the first 
#				| iteration number in the first 3d_data* folder, and convert that into code 
#				| units of time. Then look at at "bhns.xon" and look for that time. Copy 
#				| that time exactly into "firstTime" but not using scientific notation.
#				| If your first time is zero and you use particle seed, check "particle.mon" 
#				| and look at the first line. If the time here is not zero, use this time instead.
firstTime = "00000.00000000000"

# particleFlags:    [bool list]
#                   Specify how many particle field plots you want (up to three, should be easy to add more)
particleFlags = [True, False, False]

# useCustomParticleSeeds:   [bool]
#                           If true: uses seeds from the files in customSeedTXTs
#                           If false: uses seeds generated by the built in seed maker
useCustomParticleSeeds = False

# customSeedTXTs:   [str list]
#                   .txt files with three columns with each row corresponding to a seed
#                   create these by what every means you would like
customSeedTXTs = ["seeds_0.txt", "seeds_1.txt", "seeds_2.txt"]

###### Built in seed maker ######
#               | the built in seed maker creates seeds in rings 
#
# particleCenters:          [float-tuple list] centers of the rings 
#                       e.g. the center of mass of a neutron star
particleCenters = [(0., 0., 0.), (0., 0., 0.), (0., 0., 0.)]

# particleNormVecs:        [float-tuple list] vectors normal to the plane that the seed ring lies on 
#                       e.g. (0., 0., 1.) if you want seeds on xy-plane
particleNormVecs = [(0., 0., 1.), (0., 0., 1.), (0., 0., 1.)]

# particlePairs:            [float-tuple list] list of (radius, height) pairs
#                       radius: is radius of ring
#                       height: if height is not zero, then two rings are placed
#                            above and below the plane defined by the norm vecs
#                               if height is zero, then only one ring is placed
particlePairs = [(1., 0.), (1., 0.), (1., 0.)]

# particleNumSeeds:        [int list] number of points in each ring
particleNumSeeds = [8, 8, 8]

# particleOffsets:          [float list] an angle offset; good to use fractions of pi (e.g. pi/8, pi/10, ...)
from math import pi
particleOffsets = [0., 0., 0.]



###### Paritcle Integration Settings ######
#               | list of XML files for integral curve attributes corresponding to the particle field plots
#               | maxStepLenghts and maxSteps (most commonly tinkered with) will override the values in the XML file
#               | | https://visit-sphinx-github-user-manual.readthedocs.io/en/stable/python_scripting/attributes.html#integralcurve-integralcurveattributes
# particleIntegrationXMLs:  [str list] file names in "bin/visit_atts/bfield_atts/"
# particleMaxStepLengths:   [float list] decreasing will make your field lines smoother (but shorter)
# particleMaxSteps:         [int list] increasing will make your field lines longer
particleIntegrationXMLs = ["stream_particle_0.xml", "stream_particle_1.xml", "stream_particle_2.xml"]
particleMaxStepLengths = [10., 10., 10.]
particleMaxSteps = [2000, 2000, 2000]

# particleColors:   [int-tuples list]
#                   list of colors corresponding to the particle field plots; sets the color of the field line
particleColors = [(0, 255, 0), (0, 255, 0), (0, 255, 0)]

########################################################################


#################### Grid point field line settings ####################
#
# settings pertaining to field lines that are seeded by grid points
#   | grid point field lines are used to plot field lines around the poles of black holes
#   | instead of following particles, we want to see how the field arond the black holes behave

# bh_flags are calculated automatically in params.py, values for nonexistant bhs don't matter

# bh_rs:            [float list] rough radius of each black hole, calculate using "bin/misc_scripts/bh_r_calc.py"
bh_rs = [0.1, 0.1, 0.1]

###### Grid seed maker ######
#               | similar to the built-in seed maker for particle seeds
#               | norm vecs and centers are calculated automatically
# gridPairs:        [float-tuple list] (radius, height) pairs, but the values are ratios of the black hole radius
#                       e.g. (0.5 1.5) makes rings with radius=0.5*bh_r at 1.5*bh_r above and below the bh center
gridPairs = [(0.5, 1.5), (0.5, 1.5), (0.5, 1.5)]

# gridNumSteps:     [int list] number of points in each ring
gridNumSteps = [10, 10, 10] 

# gridOffsets:       [float list] an angle offset; good to use fractions of pi (e.g. pi/8, pi/10, ...)
gridOffsets = [0., 0., 0.] 



###### Grid Point Integration Settings ######
#               | list of XML files for integral curve attributes corresponding to the grid point field plots
#               | each index corresponds to a black hole (supports up to three black holes)
#               | maxStepLenghts, maxSteps,  (most commonly tinkered with) and directions will override the values in the XML file
#               | https://visit-sphinx-github-user-manual.readthedocs.io/en/stable/python_scripting/attributes.html#integralcurve-integralcurveattributes
# gridIntegrationXMLs:  [str list] file names in "bin/visit_atts/bfield_atts/"
# gridMaxStepLengths:   [float list]  decreasing will make your field lines smoother (but shorter)
# gridMaxSteps:         [int list] increasing will make your field lines longer
# gridDirections:       [str-tuple list] specifies integration direction of the ring of points above and below the black hole (wrt its spin)
#                                    like ("above_direction", "below_direction")
#                                    try the different combinations of "Foward" and "Backward" until it looks good
gridIntegrationXMLs = ["stream_grid_0.xml", "stream_grid_1.xml", "stream_grid_2.xml"]
gridMaxStepLengths = [10., 10., 10.]
gridMaxSteps = [2000, 2000, 2000]
gridDirections = [("Forward", "Backward"), ("Forward", "Backward"), ("Forward", "Backward")]

# gridColors:   [int-tuples list]
#                   list of colors corresponding to the grid point field plots; sets the color of the field line
gridColors = [(255, 255, 255), (255, 255, 255), (255, 255, 255)]


########################################################################

particleMakerSettings = [particleCenters, particleNormVecs, particlePairs, particleNumSeeds, particleOffsets]
particleIntegrationSettings = [particleIntegrationXMLs, particleMaxStepLengths, particleMaxSteps]

gridMakerSettings = [bh_rs, gridPairs, gridNumSteps, gridOffsets]
gridIntegrationSettings = [gridIntegrationXMLs, gridMaxStepLengths, gridMaxSteps, gridDirections]



########################################################################

params_field = [useParticleTracer, firstTime, particleFlags, useCustomParticleSeeds, customSeedTXTs, 
    particleMakerSettings, particleIntegrationSettings, particleColors,
    gridMakerSettings, gridIntegrationSettings, gridColors]